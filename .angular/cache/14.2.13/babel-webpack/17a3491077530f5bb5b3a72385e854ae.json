{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as CryptoJS from 'crypto-js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let FtpService = /*#__PURE__*/(() => {\n  class FtpService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:7000'; // Cambia si usas otro puerto/backend\n\n      this.secretKey = '5ecf6fd301f27a5f91d2502d5342075aa4dfee0db9a3feabf24bcc485d710df3c8e7d301cee592cf59b1ba17b6a6ad96e7acfd284bf9bfcfff7f128e9fee04cc';\n    }\n\n    login(user) {\n      const encryptedUser = CryptoJS.AES.encrypt(JSON.stringify(user), this.secretKey).toString();\n      return this.http.post(`${this.apiUrl}/login`, {\n        payload: encryptedUser\n      }).pipe(tap(response => {\n        this.guardarToken(response.token, user.username, user.password);\n      }));\n    }\n\n    listFiles(user) {\n      const encryptedUser = CryptoJS.AES.encrypt(JSON.stringify(user), this.secretKey).toString();\n      return this.http.post(`${this.apiUrl}/ftp/list`, {\n        payload: encryptedUser\n      });\n    }\n\n    subirArchivo(file, user) {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('username', user.username);\n      formData.append('password', user.password);\n      return this.http.post(`${this.apiUrl}/ftp/upload`, formData);\n    }\n\n    descargarArchivo(nombre, user) {\n      return this.http.post(`${this.apiUrl}/ftp/download/${nombre}`, user, {\n        responseType: 'blob' // Esto es clave para manejar archivos binarios\n\n      });\n    }\n\n    eliminarArchivo(nombre, user) {\n      //return this.http.delete(`${this.apiUrl}/ftp/delete/${encodeURIComponent(nombre)}`);\n      return this.http.delete(`${this.apiUrl}/ftp/delete/${nombre}`, {\n        params: {\n          username: user.username,\n          password: user.password\n        }\n      });\n    }\n\n    guardarToken(token, user, pas) {\n      localStorage.setItem('token', token);\n      localStorage.setItem('dato1', user);\n      localStorage.setItem('dato2', pas);\n    }\n\n  }\n\n  FtpService.ɵfac = function FtpService_Factory(t) {\n    return new (t || FtpService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  FtpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FtpService,\n    factory: FtpService.ɵfac,\n    providedIn: 'root'\n  });\n  return FtpService;\n})();","map":null,"metadata":{},"sourceType":"module"}